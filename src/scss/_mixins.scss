@mixin fit-viewport {
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

@mixin cards-fit-viewport {
  position: absolute;
  top: 1em;
  bottom: 1em;
  right: 1em;
  left: 1em;
}

@mixin stick-to-viewport {
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

@mixin gpu-acel {
  @include transform(translateZ(0));
}

@mixin dead-center($val,$pos) {
  position: $pos;
  left: $val;
  top: $val;
  @include transform(translate(-$val, -$val));
}

// Media queries
@mixin respond-to($media) {
  @if $media == handhelds {
    @media only screen and (max-width: $break-small) { @content; }
  }
  @else if $media == medium-screens {
    @media only screen and (min-width: $break-small + 1) and (max-width: $break-large - 1) { @content; }
  }
  @else if $media == wide-screens {
    @media only screen and (min-width: $break-large) { @content; }
  }
}

/* ANIM MIXN USAGE

Using the mixins looks like this:

  @include keyframes(move-the-object) {
    0%   { left: 100px; }
    100% { left: 200px; }
  }
  .object-to-animate {
    @include animation('move-the-object .5s 1', 'move-the-object-again .5s 1 .5s');
  }

The mixin allows for chaining of animations and as many keyframes as you’d care to use. It’s a simple syntax that is very readable and maintainable for the long-term.
*/

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
      $animations: #{$animations + nth($animate, $i)};

      @if $i < $max {
          $animations: #{$animations + ", "};
      }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}